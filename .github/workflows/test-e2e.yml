name: End-to-End (E2E) Tests

on:
  workflow_run:
    # Must match the name of build.yml workflow.
    workflows: ["Build"]
    types: [completed]

concurrency:
  group: |
    ${{
      github.event.workflow_run.head_branch && format('e2e-{0}', github.event.workflow_run.head_branch)
      || format('e2e-{0}', github.event.workflow_run.head_sha)
    }}
  cancel-in-progress: true

env:
  STATUS_CONTEXT: "End-to-End (E2E) Tests"
  STATUSES_REQUEST_URL: "https://api.github.com/repos/${{ github.repository }}/statuses/${{ github.event.workflow_run.head_sha }}"
  TARGET_URL: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

jobs:
  run-e2e:
    name: Run E2E Tests
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    steps:
      - name: Download Docker tag
        uses: actions/download-artifact@v4
        with:
          name: docker-tag
          github-token: ${{ secrets.GITHUB_TOKEN }}
          run-id: ${{ github.event.workflow_run.id }}
      - name: Set Docker Tag Environment Variable
        run: |
          if [ -f "docker-tag.txt" ]; then
            ARTEMIS_DOCKER_TAG=$(cat docker-tag.txt)
            echo "ARTEMIS_DOCKER_TAG=${ARTEMIS_DOCKER_TAG}" >> $GITHUB_ENV
            echo "Using Docker tag: ${ARTEMIS_DOCKER_TAG}"
          else
            echo "::error::No docker-tag.txt found in the previous build workflow! Artifact is needed to run E2E tests."
            exit 1
          fi
      - name: echo ARTEMIS_DOCKER_TAG
        run: |
          echo $ARTEMIS_DOCKER_TAG

      - name: Run on pull_request
        if: ${{ github.event.workflow_run.event == 'pull_request' }}
        run: echo 'yessss ${{ github.event.workflow_run.pull_requests }}'
      - name: Run on push
        if: ${{ github.event.workflow_run.event != 'pull_request' }}
        run: echo 'push ${{ github.event.workflow_run.pull_requests }}'
      - name: Echo github.event.workflow_run.event
        run: echo '${{ toJSON(github.event.workflow_run.event) }}'
      - name: Echo github.event.workflow_run
        run: echo '${{ toJSON(github.event.workflow_run) }}'
      - name: Echo github.event
        run: echo '${{ toJSON(github.event) }}'
      - name: Echo github.event.workflow_run
        run: echo '${{ toJSON(github.event.workflow_run) }}'

      
      
      - name: Create pending status
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "${{ env.STATUSES_REQUEST_URL }}" \
            -d '{"state":"pending","context":"${{ env.STATUS_CONTEXT }}","description":"E2E tests are running...","target_url":"${{ env.TARGET_URL }}"}'

      - name: Save triggering workflow info
        run: |
          echo "TRIGGERING_WORKFLOW_RUN_ID=${{ github.event.workflow_run.id }}" > workflow-context.txt
          echo "TRIGGERING_WORKFLOW_HEAD_BRANCH=${{ github.event.workflow_run.head_branch }}" >> workflow-context.txt
          echo "TRIGGERING_WORKFLOW_HEAD_SHA=${{ github.event.workflow_run.head_sha }}" >> workflow-context.txt
          cat workflow-context.txt

      - name: Upload workflow context
        uses: actions/upload-artifact@v4
        with:
          name: workflow-context
          path: workflow-context.txt

      # Add a notice in this workflow run's timeline showing which Build workflow triggered it
      # This helps developers navigate between related workflow runs
      - name: Add link to triggering workflow
        run: |
          echo "::notice title=Triggered by workflow run::This E2E test was triggered by workflow run #${{ github.event.workflow_run.id }} - View it at https://github.com/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}"


      - name: Echo concurrency group
        run: |
          CONCURRENCY_GROUP=$(echo "${{ 
            github.event.workflow_run.head_branch && format('e2e-{0}', github.event.workflow_run.head_branch)
            || github.event.workflow_run.event == 'release' && format('e2e-release-{0}', github.event.workflow_run.tag_name)
            || format('e2e-{0}', github.event.workflow_run.head_sha)
          }}")
          echo "Concurrency group: $CONCURRENCY_GROUP"
      - name: Git Checkout
        uses: actions/checkout@v4
      - name: Upload JUnit Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: JUnit Test Results
          if-no-files-found: error
          path: src/test/playwright/test-reports/*.xml
      # - name: Parse test results and update status
      #   if: always()
      #   id: parse-results
      #   continue-on-error: true
      #   run: |
      #     TOTAL=0
      #     PASSED=0
      #     FAILED=0
      #     SKIPPED=0
          
      #     # Check if test results file exists
      #     XML_FILE="src/test/playwright/test-reports/results.xml"
      #     if [ -f "$XML_FILE" ]; then
      #       echo "Final results.xml file found, started parsing..."
            
      #       # Sum the totals for all testsuites
      #       TESTS_COUNT=$(grep -o 'tests="[0-9]*"' "$XML_FILE" | grep -o '[0-9]*' | awk '{sum+=$1} END {print sum}')
      #       FAILURES_COUNT=$(grep -o 'failures="[0-9]*"' "$XML_FILE" | grep -o '[0-9]*' | awk '{sum+=$1} END {print sum}')
      #       SKIPPED_COUNT=$(grep -o 'skipped="[0-9]*"' "$XML_FILE" | grep -o '[0-9]*' | awk '{sum+=$1} END {print sum}')
      #       set -e
            
      #       # Use values if counts were found
      #       if [ -n "$TESTS_COUNT" ]; then TOTAL=$TESTS_COUNT; fi
      #       if [ -n "$FAILURES_COUNT" ]; then FAILED=$FAILURES_COUNT; fi
      #       if [ -n "$SKIPPED_COUNT" ]; then SKIPPED=$SKIPPED_COUNT; fi
            
      #       # Calculate passed tests
      #       PASSED=$((TOTAL - FAILED - SKIPPED))
      #     fi

      #     echo "XML Parsing Results:"
      #     echo "Total: $TOTAL"
      #     echo "Failed: $FAILED" 
      #     echo "Skipped: $SKIPPED"
      #     echo "Passed: $PASSED"

      #     # Save to outputs
      #     echo "total=$TOTAL" >> $GITHUB_OUTPUT
      #     echo "passed=$PASSED" >> $GITHUB_OUTPUT
      #     echo "failed=$FAILED" >> $GITHUB_OUTPUT
      #     echo "skipped=$SKIPPED" >> $GITHUB_OUTPUT

      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v5
        id: junit-reporter
        if: always()
        env:
          NODE_OPTIONS: "--max_old_space_size=4096"
        with:
          commit: ${{ github.event.workflow_run.head_sha }}
          annotate_only: true
          fail_on_failure: true
          require_tests: true
          require_passed_tests: true
          detailed_summary: true
          include_time_in_summary: true
          flaky_summary: true
          group_suite: true
          comment: true
          updateComment: false
          report_paths: 'src/test/playwright/test-reports/results.xml'

      - name: Update status with results
        if: always()
        id: update-status-detailed
        continue-on-error: true
        run: |
          # Determine workflow status
          WORKFLOW_STATUS="${{ job.status }}"
          
          # Get test results
          TOTAL="${{ steps.junit-reporter.outputs.total || 0 }}"
          PASSED="${{ steps.junit-reporter.outputs.passed || 0 }}"
          FAILED="${{ steps.junit-reporter.outputs.failed || 0 }}"
          SKIPPED="${{ steps.junit-reporter.outputs.skipped || 0 }}"
          
          # Determine GitHub status state based on workflow status
          if [ "$WORKFLOW_STATUS" = "success" ]; then
            STATE="success"
            DESCRIPTION="E2E tests finished: $PASSED passed, $FAILED failed, $SKIPPED skipped"
          elif [ "$WORKFLOW_STATUS" = "failure" ]; then
            STATE="failure"
            DESCRIPTION="E2E tests finished: $PASSED passed, $FAILED failed, $SKIPPED skipped"
          else
            STATE="error"
            DESCRIPTION="⚠️ E2E tests encountered an error"
          fi

          DESCRIPTION_ESCAPED=$(echo "$DESCRIPTION" | sed 's/"/\\"/g')
          DESCRIPTION_ESCAPED="${{ steps.junit-reporter.outputs.summary || '⚠️ E2E tests encountered an error' }}"
          JSON_PAYLOAD='{"state":"'$STATE'","context":"${{ env.STATUS_CONTEXT }}","description":"'$DESCRIPTION_ESCAPED'","target_url":"${{ env.TARGET_URL }}"}'
          echo "JSON payload: $JSON_PAYLOAD"
          
          # Update status
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "${{ env.STATUSES_REQUEST_URL }}" \
            -d "$JSON_PAYLOAD"

      - name: Fallback status update
        if: always() && steps.update-status-detailed.outcome != 'success'
        run: |          
          JSON_PAYLOAD='{"state":"error","context":"${{ env.STATUS_CONTEXT }}","description":"Failed to set status!","target_url":"${{ env.TARGET_URL }}"}'
          echo "FALLBACK JSON payload: $JSON_PAYLOAD"
          
          # Update status
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "${{ env.STATUSES_REQUEST_URL }}" \
            -d "$JSON_PAYLOAD"

      - name: Dump github.event to JSON file for test result publish
        if: always()
        run: echo '${{ toJson(github.event) }}' > event.json

      # - name: Publish Test Results
      #   uses: EnricoMi/publish-unit-test-result-action@v2.18.0
      #   if: always()
      #   with:
      #     check_run: false
      #     comment_title: "End-to-End (E2E) Tests Results"
      #     commit: ${{ github.event.workflow_run.head_sha }}
      #     event_file: "event.json"
      #     event_name: "workflow_run"
      #     action_fail: true
      #     pull_request_build: "commit"
      #     files: src/test/playwright/test-reports/results.xml





